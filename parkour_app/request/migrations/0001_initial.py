# Generated by Django 3.2.20 on 2023-08-21 15:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import request.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('sample', '0001_initial'),
        ('common', '0001_initial'),
        ('library', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='FileRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('file', models.FileField(upload_to='request_files/%Y/%m/%d/')),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='Create Time')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Update Time')),
                ('name', models.CharField(blank=True, max_length=100, verbose_name='Name')),
                ('description', models.TextField()),
                ('deep_seq_request', models.FileField(blank=True, null=True, upload_to='deep_sequencing_requests/%Y/%m/%d/', verbose_name='Deep Sequencing Request')),
                ('samples_submitted', models.BooleanField(default=False, verbose_name='Samples Submitted')),
                ('sequenced', models.BooleanField(default=False, verbose_name='Sequenced')),
                ('cost_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.costunit', verbose_name='Cost Unit')),
                ('files', models.ManyToManyField(blank=True, related_name='request', to='request.FileRequest')),
                ('libraries', models.ManyToManyField(blank=True, related_name='request', to='library.Library')),
                ('samples', models.ManyToManyField(blank=True, related_name='request', to='sample.Sample')),
                ('user', models.ForeignKey(on_delete=models.SET(request.models.get_sentinel_user), to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
