import {
  __esm
} from "./chunk-CF3WPAMV.js";

// node_modules/@revolist/revogrid/dist/esm-es5/index-6f753b3c.js
var __extends, __awaiter, __generator, __spreadArray, NAMESPACE, contentRef, hostTagName, useNativeShadowDom, checkSlotFallbackVisibility, checkSlotRelocate, isSvgMode, renderingRef, queuePending, win, CSS, doc, plt, promiseResolve, supportsConstructableStylesheets, addHostEventListeners, hostListenerProxy, getHostListenerTarget, hostListenerOpts, HYDRATED_CSS, XLINK_NS, createTime, uniqueTime, rootAppliedStyles, registerStyle, addStyle, attachStyles, getScopeId, EMPTY_OBJ, SVG_NS, HTML_NS, isComplexType, h, newVNode, Host, isHost, vdomFnUtils, convertToPublic, convertToPrivate, setAccessor, parseClassListRegex, parseClassList, updateElement, createElm, putBackInOriginalLocation, addVnodes, removeVnodes, updateChildren, isSameVnode, referenceNode, parentReferenceNode, patch, updateFallbackSlotVisibility, relocateNodes, relocateSlotContent, isNodeLocatedInSlot, callNodeRefs, renderVdom, getElement, createEvent, emitEvent, attachToAncestor, scheduleUpdate, dispatchHooks, updateComponent, callRender, getRenderingRef, postUpdateComponent, forceUpdate, appDidLoad, safeCall, then, addHydratedFlag, parsePropertyValue, getValue, setValue, proxyComponent, initializeComponent, fireConnectedCallback, connectedCallback, setContentReference, disconnectedCallback, bootstrapLazy, hostRefs, getHostRef, registerInstance, registerHost, isMemberInElement, consoleError, cmpModules, loadModule, styles, queueDomReads, queueDomWrites, queueTask, consume, flush, nextTick, writeTask;
var init_index_6f753b3c = __esm({
  "node_modules/@revolist/revogrid/dist/esm-es5/index-6f753b3c.js"() {
    __extends = function() {
      var e = function(t, r) {
        e = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(e2, t2) {
          e2.__proto__ = t2;
        } || function(e2, t2) {
          for (var r2 in t2)
            if (Object.prototype.hasOwnProperty.call(t2, r2))
              e2[r2] = t2[r2];
        };
        return e(t, r);
      };
      return function(t, r) {
        if (typeof r !== "function" && r !== null)
          throw new TypeError("Class extends value " + String(r) + " is not a constructor or null");
        e(t, r);
        function n() {
          this.constructor = t;
        }
        t.prototype = r === null ? Object.create(r) : (n.prototype = r.prototype, new n());
      };
    }();
    __awaiter = function(e, t, r, n) {
      function a(e2) {
        return e2 instanceof r ? e2 : new r(function(t2) {
          t2(e2);
        });
      }
      return new (r || (r = Promise))(function(r2, o) {
        function s(e2) {
          try {
            l(n.next(e2));
          } catch (e3) {
            o(e3);
          }
        }
        function i(e2) {
          try {
            l(n["throw"](e2));
          } catch (e3) {
            o(e3);
          }
        }
        function l(e2) {
          e2.done ? r2(e2.value) : a(e2.value).then(s, i);
        }
        l((n = n.apply(e, t || [])).next());
      });
    };
    __generator = function(e, t) {
      var r = { label: 0, sent: function() {
        if (o[0] & 1)
          throw o[1];
        return o[1];
      }, trys: [], ops: [] }, n, a, o, s;
      return s = { next: i(0), throw: i(1), return: i(2) }, typeof Symbol === "function" && (s[Symbol.iterator] = function() {
        return this;
      }), s;
      function i(e2) {
        return function(t2) {
          return l([e2, t2]);
        };
      }
      function l(s2) {
        if (n)
          throw new TypeError("Generator is already executing.");
        while (r)
          try {
            if (n = 1, a && (o = s2[0] & 2 ? a["return"] : s2[0] ? a["throw"] || ((o = a["return"]) && o.call(a), 0) : a.next) && !(o = o.call(a, s2[1])).done)
              return o;
            if (a = 0, o)
              s2 = [s2[0] & 2, o.value];
            switch (s2[0]) {
              case 0:
              case 1:
                o = s2;
                break;
              case 4:
                r.label++;
                return { value: s2[1], done: false };
              case 5:
                r.label++;
                a = s2[1];
                s2 = [0];
                continue;
              case 7:
                s2 = r.ops.pop();
                r.trys.pop();
                continue;
              default:
                if (!(o = r.trys, o = o.length > 0 && o[o.length - 1]) && (s2[0] === 6 || s2[0] === 2)) {
                  r = 0;
                  continue;
                }
                if (s2[0] === 3 && (!o || s2[1] > o[0] && s2[1] < o[3])) {
                  r.label = s2[1];
                  break;
                }
                if (s2[0] === 6 && r.label < o[1]) {
                  r.label = o[1];
                  o = s2;
                  break;
                }
                if (o && r.label < o[2]) {
                  r.label = o[2];
                  r.ops.push(s2);
                  break;
                }
                if (o[2])
                  r.ops.pop();
                r.trys.pop();
                continue;
            }
            s2 = t.call(e, r);
          } catch (e2) {
            s2 = [6, e2];
            a = 0;
          } finally {
            n = o = 0;
          }
        if (s2[0] & 5)
          throw s2[1];
        return { value: s2[0] ? s2[1] : void 0, done: true };
      }
    };
    __spreadArray = function(e, t, r) {
      if (r || arguments.length === 2)
        for (var n = 0, a = t.length, o; n < a; n++) {
          if (o || !(n in t)) {
            if (!o)
              o = Array.prototype.slice.call(t, 0, n);
            o[n] = t[n];
          }
        }
      return e.concat(o || Array.prototype.slice.call(t));
    };
    NAMESPACE = "revo-grid";
    useNativeShadowDom = false;
    checkSlotFallbackVisibility = false;
    checkSlotRelocate = false;
    isSvgMode = false;
    renderingRef = null;
    queuePending = false;
    win = typeof window !== "undefined" ? window : {};
    CSS = win.CSS;
    doc = win.document || { head: {} };
    plt = { $flags$: 0, $resourcesUrl$: "", jmp: function(e) {
      return e();
    }, raf: function(e) {
      return requestAnimationFrame(e);
    }, ael: function(e, t, r, n) {
      return e.addEventListener(t, r, n);
    }, rel: function(e, t, r, n) {
      return e.removeEventListener(t, r, n);
    }, ce: function(e, t) {
      return new CustomEvent(e, t);
    } };
    promiseResolve = function(e) {
      return Promise.resolve(e);
    };
    supportsConstructableStylesheets = function() {
      try {
        new CSSStyleSheet();
        return typeof new CSSStyleSheet().replaceSync === "function";
      } catch (e) {
      }
      return false;
    }();
    addHostEventListeners = function(e, t, r, n) {
      if (r) {
        r.map(function(r2) {
          var n2 = r2[0], a = r2[1], o = r2[2];
          var s = getHostListenerTarget(e, n2);
          var i = hostListenerProxy(t, o);
          var l = hostListenerOpts(n2);
          plt.ael(s, a, i, l);
          (t.$rmListeners$ = t.$rmListeners$ || []).push(function() {
            return plt.rel(s, a, i, l);
          });
        });
      }
    };
    hostListenerProxy = function(e, t) {
      return function(r) {
        try {
          {
            if (e.$flags$ & 256) {
              e.$lazyInstance$[t](r);
            } else {
              (e.$queuedListeners$ = e.$queuedListeners$ || []).push([t, r]);
            }
          }
        } catch (e2) {
          consoleError(e2);
        }
      };
    };
    getHostListenerTarget = function(e, t) {
      if (t & 4)
        return doc;
      return e;
    };
    hostListenerOpts = function(e) {
      return (e & 2) !== 0;
    };
    HYDRATED_CSS = "{visibility:hidden}.hydrated{visibility:inherit}";
    XLINK_NS = "http://www.w3.org/1999/xlink";
    createTime = function(e, t) {
      if (t === void 0) {
        t = "";
      }
      {
        return function() {
          return;
        };
      }
    };
    uniqueTime = function(e, t) {
      {
        return function() {
          return;
        };
      }
    };
    rootAppliedStyles = /* @__PURE__ */ new WeakMap();
    registerStyle = function(e, t, r) {
      var n = styles.get(e);
      if (supportsConstructableStylesheets && r) {
        n = n || new CSSStyleSheet();
        if (typeof n === "string") {
          n = t;
        } else {
          n.replaceSync(t);
        }
      } else {
        n = t;
      }
      styles.set(e, n);
    };
    addStyle = function(e, t, r, n) {
      var a = getScopeId(t);
      var o = styles.get(a);
      e = e.nodeType === 11 ? e : doc;
      if (o) {
        if (typeof o === "string") {
          e = e.head || e;
          var s = rootAppliedStyles.get(e);
          var i = void 0;
          if (!s) {
            rootAppliedStyles.set(e, s = /* @__PURE__ */ new Set());
          }
          if (!s.has(a)) {
            {
              if (plt.$cssShim$) {
                i = plt.$cssShim$.createHostStyle(n, a, o, !!(t.$flags$ & 10));
                var l = i["s-sc"];
                if (l) {
                  a = l;
                  s = null;
                }
              } else {
                i = doc.createElement("style");
                i.innerHTML = o;
              }
              e.insertBefore(i, e.querySelector("link"));
            }
            if (s) {
              s.add(a);
            }
          }
        } else if (!e.adoptedStyleSheets.includes(o)) {
          e.adoptedStyleSheets = __spreadArray(__spreadArray([], e.adoptedStyleSheets, true), [o], false);
        }
      }
      return a;
    };
    attachStyles = function(e) {
      var t = e.$cmpMeta$;
      var r = e.$hostElement$;
      var n = createTime("attachStyles", t.$tagName$);
      addStyle(r.getRootNode(), t, e.$modeName$, r);
      n();
    };
    getScopeId = function(e, t) {
      return "sc-" + e.$tagName$;
    };
    EMPTY_OBJ = {};
    SVG_NS = "http://www.w3.org/2000/svg";
    HTML_NS = "http://www.w3.org/1999/xhtml";
    isComplexType = function(e) {
      e = typeof e;
      return e === "object" || e === "function";
    };
    h = function(e, t) {
      var r = [];
      for (var n = 2; n < arguments.length; n++) {
        r[n - 2] = arguments[n];
      }
      var a = null;
      var o = null;
      var s = null;
      var i = false;
      var l = false;
      var c = [];
      var f = function(t2) {
        for (var r2 = 0; r2 < t2.length; r2++) {
          a = t2[r2];
          if (Array.isArray(a)) {
            f(a);
          } else if (a != null && typeof a !== "boolean") {
            if (i = typeof e !== "function" && !isComplexType(a)) {
              a = String(a);
            }
            if (i && l) {
              c[c.length - 1].$text$ += a;
            } else {
              c.push(i ? newVNode(null, a) : a);
            }
            l = i;
          }
        }
      };
      f(r);
      if (t) {
        if (t.key) {
          o = t.key;
        }
        if (t.name) {
          s = t.name;
        }
        {
          var u = t.className || t.class;
          if (u) {
            t.class = typeof u !== "object" ? u : Object.keys(u).filter(function(e2) {
              return u[e2];
            }).join(" ");
          }
        }
      }
      if (typeof e === "function") {
        return e(t === null ? {} : t, c, vdomFnUtils);
      }
      var $ = newVNode(e, null);
      $.$attrs$ = t;
      if (c.length > 0) {
        $.$children$ = c;
      }
      {
        $.$key$ = o;
      }
      {
        $.$name$ = s;
      }
      return $;
    };
    newVNode = function(e, t) {
      var r = { $flags$: 0, $tag$: e, $text$: t, $elm$: null, $children$: null };
      {
        r.$attrs$ = null;
      }
      {
        r.$key$ = null;
      }
      {
        r.$name$ = null;
      }
      return r;
    };
    Host = {};
    isHost = function(e) {
      return e && e.$tag$ === Host;
    };
    vdomFnUtils = { forEach: function(e, t) {
      return e.map(convertToPublic).forEach(t);
    }, map: function(e, t) {
      return e.map(convertToPublic).map(t).map(convertToPrivate);
    } };
    convertToPublic = function(e) {
      return { vattrs: e.$attrs$, vchildren: e.$children$, vkey: e.$key$, vname: e.$name$, vtag: e.$tag$, vtext: e.$text$ };
    };
    convertToPrivate = function(e) {
      if (typeof e.vtag === "function") {
        var t = Object.assign({}, e.vattrs);
        if (e.vkey) {
          t.key = e.vkey;
        }
        if (e.vname) {
          t.name = e.vname;
        }
        return h.apply(void 0, __spreadArray([e.vtag, t], e.vchildren || [], false));
      }
      var r = newVNode(e.vtag, e.vtext);
      r.$attrs$ = e.vattrs;
      r.$children$ = e.vchildren;
      r.$key$ = e.vkey;
      r.$name$ = e.vname;
      return r;
    };
    setAccessor = function(e, t, r, n, a, o) {
      if (r !== n) {
        var s = isMemberInElement(e, t);
        var i = t.toLowerCase();
        if (t === "class") {
          var l = e.classList;
          var c = parseClassList(r);
          var f = parseClassList(n);
          l.remove.apply(l, c.filter(function(e2) {
            return e2 && !f.includes(e2);
          }));
          l.add.apply(l, f.filter(function(e2) {
            return e2 && !c.includes(e2);
          }));
        } else if (t === "style") {
          {
            for (var u in r) {
              if (!n || n[u] == null) {
                if (u.includes("-")) {
                  e.style.removeProperty(u);
                } else {
                  e.style[u] = "";
                }
              }
            }
          }
          for (var u in n) {
            if (!r || n[u] !== r[u]) {
              if (u.includes("-")) {
                e.style.setProperty(u, n[u]);
              } else {
                e.style[u] = n[u];
              }
            }
          }
        } else if (t === "key")
          ;
        else if (t === "ref") {
          if (n) {
            n(e);
          }
        } else if (!s && t[0] === "o" && t[1] === "n") {
          if (t[2] === "-") {
            t = t.slice(3);
          } else if (isMemberInElement(win, i)) {
            t = i.slice(2);
          } else {
            t = i[2] + t.slice(3);
          }
          if (r) {
            plt.rel(e, t, r, false);
          }
          if (n) {
            plt.ael(e, t, n, false);
          }
        } else {
          var $ = isComplexType(n);
          if ((s || $ && n !== null) && !a) {
            try {
              if (!e.tagName.includes("-")) {
                var d = n == null ? "" : n;
                if (t === "list") {
                  s = false;
                } else if (r == null || e[t] != d) {
                  e[t] = d;
                }
              } else {
                e[t] = n;
              }
            } catch (e2) {
            }
          }
          var v = false;
          {
            if (i !== (i = i.replace(/^xlink\:?/, ""))) {
              t = i;
              v = true;
            }
          }
          if (n == null || n === false) {
            if (n !== false || e.getAttribute(t) === "") {
              if (v) {
                e.removeAttributeNS(XLINK_NS, t);
              } else {
                e.removeAttribute(t);
              }
            }
          } else if ((!s || o & 4 || a) && !$) {
            n = n === true ? "" : n;
            if (v) {
              e.setAttributeNS(XLINK_NS, t, n);
            } else {
              e.setAttribute(t, n);
            }
          }
        }
      }
    };
    parseClassListRegex = /\s/;
    parseClassList = function(e) {
      return !e ? [] : e.split(parseClassListRegex);
    };
    updateElement = function(e, t, r, n) {
      var a = t.$elm$.nodeType === 11 && t.$elm$.host ? t.$elm$.host : t.$elm$;
      var o = e && e.$attrs$ || EMPTY_OBJ;
      var s = t.$attrs$ || EMPTY_OBJ;
      {
        for (n in o) {
          if (!(n in s)) {
            setAccessor(a, n, o[n], void 0, r, t.$flags$);
          }
        }
      }
      for (n in s) {
        setAccessor(a, n, o[n], s[n], r, t.$flags$);
      }
    };
    createElm = function(e, t, r, n) {
      var a = t.$children$[r];
      var o = 0;
      var s;
      var i;
      var l;
      if (!useNativeShadowDom) {
        checkSlotRelocate = true;
        if (a.$tag$ === "slot") {
          a.$flags$ |= a.$children$ ? 2 : 1;
        }
      }
      if (a.$text$ !== null) {
        s = a.$elm$ = doc.createTextNode(a.$text$);
      } else if (a.$flags$ & 1) {
        s = a.$elm$ = doc.createTextNode("");
      } else {
        if (!isSvgMode) {
          isSvgMode = a.$tag$ === "svg";
        }
        s = a.$elm$ = doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, a.$flags$ & 2 ? "slot-fb" : a.$tag$);
        if (isSvgMode && a.$tag$ === "foreignObject") {
          isSvgMode = false;
        }
        {
          updateElement(null, a, isSvgMode);
        }
        if (a.$children$) {
          for (o = 0; o < a.$children$.length; ++o) {
            i = createElm(e, a, o);
            if (i) {
              s.appendChild(i);
            }
          }
        }
        {
          if (a.$tag$ === "svg") {
            isSvgMode = false;
          } else if (s.tagName === "foreignObject") {
            isSvgMode = true;
          }
        }
      }
      {
        s["s-hn"] = hostTagName;
        if (a.$flags$ & (2 | 1)) {
          s["s-sr"] = true;
          s["s-cr"] = contentRef;
          s["s-sn"] = a.$name$ || "";
          l = e && e.$children$ && e.$children$[r];
          if (l && l.$tag$ === a.$tag$ && e.$elm$) {
            putBackInOriginalLocation(e.$elm$, false);
          }
        }
      }
      return s;
    };
    putBackInOriginalLocation = function(e, t) {
      plt.$flags$ |= 1;
      var r = e.childNodes;
      for (var n = r.length - 1; n >= 0; n--) {
        var a = r[n];
        if (a["s-hn"] !== hostTagName && a["s-ol"]) {
          parentReferenceNode(a).insertBefore(a, referenceNode(a));
          a["s-ol"].remove();
          a["s-ol"] = void 0;
          checkSlotRelocate = true;
        }
        if (t) {
          putBackInOriginalLocation(a, t);
        }
      }
      plt.$flags$ &= ~1;
    };
    addVnodes = function(e, t, r, n, a, o) {
      var s = e["s-cr"] && e["s-cr"].parentNode || e;
      var i;
      for (; a <= o; ++a) {
        if (n[a]) {
          i = createElm(null, r, a);
          if (i) {
            n[a].$elm$ = i;
            s.insertBefore(i, referenceNode(t));
          }
        }
      }
    };
    removeVnodes = function(e, t, r, n, a) {
      for (; t <= r; ++t) {
        if (n = e[t]) {
          a = n.$elm$;
          callNodeRefs(n);
          {
            checkSlotFallbackVisibility = true;
            if (a["s-ol"]) {
              a["s-ol"].remove();
            } else {
              putBackInOriginalLocation(a, true);
            }
          }
          a.remove();
        }
      }
    };
    updateChildren = function(e, t, r, n) {
      var a = 0;
      var o = 0;
      var s = 0;
      var i = 0;
      var l = t.length - 1;
      var c = t[0];
      var f = t[l];
      var u = n.length - 1;
      var $ = n[0];
      var d = n[u];
      var v;
      var p;
      while (a <= l && o <= u) {
        if (c == null) {
          c = t[++a];
        } else if (f == null) {
          f = t[--l];
        } else if ($ == null) {
          $ = n[++o];
        } else if (d == null) {
          d = n[--u];
        } else if (isSameVnode(c, $)) {
          patch(c, $);
          c = t[++a];
          $ = n[++o];
        } else if (isSameVnode(f, d)) {
          patch(f, d);
          f = t[--l];
          d = n[--u];
        } else if (isSameVnode(c, d)) {
          if (c.$tag$ === "slot" || d.$tag$ === "slot") {
            putBackInOriginalLocation(c.$elm$.parentNode, false);
          }
          patch(c, d);
          e.insertBefore(c.$elm$, f.$elm$.nextSibling);
          c = t[++a];
          d = n[--u];
        } else if (isSameVnode(f, $)) {
          if (c.$tag$ === "slot" || d.$tag$ === "slot") {
            putBackInOriginalLocation(f.$elm$.parentNode, false);
          }
          patch(f, $);
          e.insertBefore(f.$elm$, c.$elm$);
          f = t[--l];
          $ = n[++o];
        } else {
          s = -1;
          {
            for (i = a; i <= l; ++i) {
              if (t[i] && t[i].$key$ !== null && t[i].$key$ === $.$key$) {
                s = i;
                break;
              }
            }
          }
          if (s >= 0) {
            p = t[s];
            if (p.$tag$ !== $.$tag$) {
              v = createElm(t && t[o], r, s);
            } else {
              patch(p, $);
              t[s] = void 0;
              v = p.$elm$;
            }
            $ = n[++o];
          } else {
            v = createElm(t && t[o], r, o);
            $ = n[++o];
          }
          if (v) {
            {
              parentReferenceNode(c.$elm$).insertBefore(v, referenceNode(c.$elm$));
            }
          }
        }
      }
      if (a > l) {
        addVnodes(e, n[u + 1] == null ? null : n[u + 1].$elm$, r, n, o, u);
      } else if (o > u) {
        removeVnodes(t, a, l);
      }
    };
    isSameVnode = function(e, t) {
      if (e.$tag$ === t.$tag$) {
        if (e.$tag$ === "slot") {
          return e.$name$ === t.$name$;
        }
        {
          return e.$key$ === t.$key$;
        }
      }
      return false;
    };
    referenceNode = function(e) {
      return e && e["s-ol"] || e;
    };
    parentReferenceNode = function(e) {
      return (e["s-ol"] ? e["s-ol"] : e).parentNode;
    };
    patch = function(e, t) {
      var r = t.$elm$ = e.$elm$;
      var n = e.$children$;
      var a = t.$children$;
      var o = t.$tag$;
      var s = t.$text$;
      var i;
      if (s === null) {
        {
          isSvgMode = o === "svg" ? true : o === "foreignObject" ? false : isSvgMode;
        }
        {
          if (o === "slot")
            ;
          else {
            updateElement(e, t, isSvgMode);
          }
        }
        if (n !== null && a !== null) {
          updateChildren(r, n, t, a);
        } else if (a !== null) {
          if (e.$text$ !== null) {
            r.textContent = "";
          }
          addVnodes(r, null, t, a, 0, a.length - 1);
        } else if (n !== null) {
          removeVnodes(n, 0, n.length - 1);
        }
        if (isSvgMode && o === "svg") {
          isSvgMode = false;
        }
      } else if (i = r["s-cr"]) {
        i.parentNode.textContent = s;
      } else if (e.$text$ !== s) {
        r.data = s;
      }
    };
    updateFallbackSlotVisibility = function(e) {
      var t = e.childNodes;
      var r;
      var n;
      var a;
      var o;
      var s;
      var i;
      for (n = 0, a = t.length; n < a; n++) {
        r = t[n];
        if (r.nodeType === 1) {
          if (r["s-sr"]) {
            s = r["s-sn"];
            r.hidden = false;
            for (o = 0; o < a; o++) {
              i = t[o].nodeType;
              if (t[o]["s-hn"] !== r["s-hn"] || s !== "") {
                if (i === 1 && s === t[o].getAttribute("slot")) {
                  r.hidden = true;
                  break;
                }
              } else {
                if (i === 1 || i === 3 && t[o].textContent.trim() !== "") {
                  r.hidden = true;
                  break;
                }
              }
            }
          }
          updateFallbackSlotVisibility(r);
        }
      }
    };
    relocateNodes = [];
    relocateSlotContent = function(e) {
      var t;
      var r;
      var n;
      var a;
      var o;
      var s;
      var i = 0;
      var l = e.childNodes;
      var c = l.length;
      for (; i < c; i++) {
        t = l[i];
        if (t["s-sr"] && (r = t["s-cr"]) && r.parentNode) {
          n = r.parentNode.childNodes;
          a = t["s-sn"];
          for (s = n.length - 1; s >= 0; s--) {
            r = n[s];
            if (!r["s-cn"] && !r["s-nr"] && r["s-hn"] !== t["s-hn"]) {
              if (isNodeLocatedInSlot(r, a)) {
                o = relocateNodes.find(function(e2) {
                  return e2.$nodeToRelocate$ === r;
                });
                checkSlotFallbackVisibility = true;
                r["s-sn"] = r["s-sn"] || a;
                if (o) {
                  o.$slotRefNode$ = t;
                } else {
                  relocateNodes.push({ $slotRefNode$: t, $nodeToRelocate$: r });
                }
                if (r["s-sr"]) {
                  relocateNodes.map(function(e2) {
                    if (isNodeLocatedInSlot(e2.$nodeToRelocate$, r["s-sn"])) {
                      o = relocateNodes.find(function(e3) {
                        return e3.$nodeToRelocate$ === r;
                      });
                      if (o && !e2.$slotRefNode$) {
                        e2.$slotRefNode$ = o.$slotRefNode$;
                      }
                    }
                  });
                }
              } else if (!relocateNodes.some(function(e2) {
                return e2.$nodeToRelocate$ === r;
              })) {
                relocateNodes.push({ $nodeToRelocate$: r });
              }
            }
          }
        }
        if (t.nodeType === 1) {
          relocateSlotContent(t);
        }
      }
    };
    isNodeLocatedInSlot = function(e, t) {
      if (e.nodeType === 1) {
        if (e.getAttribute("slot") === null && t === "") {
          return true;
        }
        if (e.getAttribute("slot") === t) {
          return true;
        }
        return false;
      }
      if (e["s-sn"] === t) {
        return true;
      }
      return t === "";
    };
    callNodeRefs = function(e) {
      {
        e.$attrs$ && e.$attrs$.ref && e.$attrs$.ref(null);
        e.$children$ && e.$children$.map(callNodeRefs);
      }
    };
    renderVdom = function(e, t) {
      var r = e.$hostElement$;
      var n = e.$cmpMeta$;
      var a = e.$vnode$ || newVNode(null, null);
      var o = isHost(t) ? t : h(null, null, t);
      hostTagName = r.tagName;
      if (n.$attrsToReflect$) {
        o.$attrs$ = o.$attrs$ || {};
        n.$attrsToReflect$.map(function(e2) {
          var t2 = e2[0], n2 = e2[1];
          return o.$attrs$[n2] = r[t2];
        });
      }
      o.$tag$ = null;
      o.$flags$ |= 4;
      e.$vnode$ = o;
      o.$elm$ = a.$elm$ = r;
      {
        contentRef = r["s-cr"];
        useNativeShadowDom = (n.$flags$ & 1) !== 0;
        checkSlotFallbackVisibility = false;
      }
      patch(a, o);
      {
        plt.$flags$ |= 1;
        if (checkSlotRelocate) {
          relocateSlotContent(o.$elm$);
          var s = void 0;
          var i = void 0;
          var l = void 0;
          var c = void 0;
          var f = void 0;
          var u = void 0;
          var $ = 0;
          for (; $ < relocateNodes.length; $++) {
            s = relocateNodes[$];
            i = s.$nodeToRelocate$;
            if (!i["s-ol"]) {
              l = doc.createTextNode("");
              l["s-nr"] = i;
              i.parentNode.insertBefore(i["s-ol"] = l, i);
            }
          }
          for ($ = 0; $ < relocateNodes.length; $++) {
            s = relocateNodes[$];
            i = s.$nodeToRelocate$;
            if (s.$slotRefNode$) {
              c = s.$slotRefNode$.parentNode;
              f = s.$slotRefNode$.nextSibling;
              l = i["s-ol"];
              while (l = l.previousSibling) {
                u = l["s-nr"];
                if (u && u["s-sn"] === i["s-sn"] && c === u.parentNode) {
                  u = u.nextSibling;
                  if (!u || !u["s-nr"]) {
                    f = u;
                    break;
                  }
                }
              }
              if (!f && c !== i.parentNode || i.nextSibling !== f) {
                if (i !== f) {
                  if (!i["s-hn"] && i["s-ol"]) {
                    i["s-hn"] = i["s-ol"].parentNode.nodeName;
                  }
                  c.insertBefore(i, f);
                }
              }
            } else {
              if (i.nodeType === 1) {
                i.hidden = true;
              }
            }
          }
        }
        if (checkSlotFallbackVisibility) {
          updateFallbackSlotVisibility(o.$elm$);
        }
        plt.$flags$ &= ~1;
        relocateNodes.length = 0;
      }
    };
    getElement = function(e) {
      return getHostRef(e).$hostElement$;
    };
    createEvent = function(e, t, r) {
      var n = getElement(e);
      return { emit: function(e2) {
        return emitEvent(n, t, { bubbles: !!(r & 4), composed: !!(r & 2), cancelable: !!(r & 1), detail: e2 });
      } };
    };
    emitEvent = function(e, t, r) {
      var n = plt.ce(t, r);
      e.dispatchEvent(n);
      return n;
    };
    attachToAncestor = function(e, t) {
      if (t && !e.$onRenderResolve$ && t["s-p"]) {
        t["s-p"].push(new Promise(function(t2) {
          return e.$onRenderResolve$ = t2;
        }));
      }
    };
    scheduleUpdate = function(e, t) {
      {
        e.$flags$ |= 16;
      }
      if (e.$flags$ & 4) {
        e.$flags$ |= 512;
        return;
      }
      attachToAncestor(e, e.$ancestorComponent$);
      var r = function() {
        return dispatchHooks(e, t);
      };
      return writeTask(r);
    };
    dispatchHooks = function(e, t) {
      var r = createTime("scheduleUpdate", e.$cmpMeta$.$tagName$);
      var n = e.$lazyInstance$;
      var a;
      if (t) {
        {
          e.$flags$ |= 256;
          if (e.$queuedListeners$) {
            e.$queuedListeners$.map(function(e2) {
              var t2 = e2[0], r2 = e2[1];
              return safeCall(n, t2, r2);
            });
            e.$queuedListeners$ = null;
          }
        }
        {
          a = safeCall(n, "componentWillLoad");
        }
      }
      {
        a = then(a, function() {
          return safeCall(n, "componentWillRender");
        });
      }
      r();
      return then(a, function() {
        return updateComponent(e, n, t);
      });
    };
    updateComponent = function(e, t, r) {
      return __awaiter(void 0, void 0, void 0, function() {
        var n, a, o, s, i, l;
        return __generator(this, function(c) {
          n = e.$hostElement$;
          a = createTime("update", e.$cmpMeta$.$tagName$);
          o = n["s-rc"];
          if (r) {
            attachStyles(e);
          }
          s = createTime("render", e.$cmpMeta$.$tagName$);
          {
            callRender(e, t);
          }
          if (plt.$cssShim$) {
            plt.$cssShim$.updateHost(n);
          }
          if (o) {
            o.map(function(e2) {
              return e2();
            });
            n["s-rc"] = void 0;
          }
          s();
          a();
          {
            i = n["s-p"];
            l = function() {
              return postUpdateComponent(e);
            };
            if (i.length === 0) {
              l();
            } else {
              Promise.all(i).then(l);
              e.$flags$ |= 4;
              i.length = 0;
            }
          }
          return [2];
        });
      });
    };
    callRender = function(e, t, r) {
      try {
        renderingRef = t;
        t = t.render && t.render();
        {
          e.$flags$ &= ~16;
        }
        {
          e.$flags$ |= 2;
        }
        {
          {
            {
              renderVdom(e, t);
            }
          }
        }
      } catch (t2) {
        consoleError(t2, e.$hostElement$);
      }
      renderingRef = null;
      return null;
    };
    getRenderingRef = function() {
      return renderingRef;
    };
    postUpdateComponent = function(e) {
      var t = e.$cmpMeta$.$tagName$;
      var r = e.$hostElement$;
      var n = createTime("postUpdate", t);
      var a = e.$lazyInstance$;
      var o = e.$ancestorComponent$;
      {
        safeCall(a, "componentDidRender");
      }
      if (!(e.$flags$ & 64)) {
        e.$flags$ |= 64;
        {
          addHydratedFlag(r);
        }
        {
          safeCall(a, "componentDidLoad");
        }
        n();
        {
          e.$onReadyResolve$(r);
          if (!o) {
            appDidLoad();
          }
        }
      } else {
        n();
      }
      {
        e.$onInstanceResolve$(r);
      }
      {
        if (e.$onRenderResolve$) {
          e.$onRenderResolve$();
          e.$onRenderResolve$ = void 0;
        }
        if (e.$flags$ & 512) {
          nextTick(function() {
            return scheduleUpdate(e, false);
          });
        }
        e.$flags$ &= ~(4 | 512);
      }
    };
    forceUpdate = function(e) {
      {
        var t = getHostRef(e);
        var r = t.$hostElement$.isConnected;
        if (r && (t.$flags$ & (2 | 16)) === 2) {
          scheduleUpdate(t, false);
        }
        return r;
      }
    };
    appDidLoad = function(e) {
      {
        addHydratedFlag(doc.documentElement);
      }
      nextTick(function() {
        return emitEvent(win, "appload", { detail: { namespace: NAMESPACE } });
      });
    };
    safeCall = function(e, t, r) {
      if (e && e[t]) {
        try {
          return e[t](r);
        } catch (e2) {
          consoleError(e2);
        }
      }
      return void 0;
    };
    then = function(e, t) {
      return e && e.then ? e.then(t) : t();
    };
    addHydratedFlag = function(e) {
      return e.classList.add("hydrated");
    };
    parsePropertyValue = function(e, t) {
      if (e != null && !isComplexType(e)) {
        if (t & 4) {
          return e === "false" ? false : e === "" || !!e;
        }
        if (t & 2) {
          return parseFloat(e);
        }
        if (t & 1) {
          return String(e);
        }
        return e;
      }
      return e;
    };
    getValue = function(e, t) {
      return getHostRef(e).$instanceValues$.get(t);
    };
    setValue = function(e, t, r, n) {
      var a = getHostRef(e);
      var o = a.$hostElement$;
      var s = a.$instanceValues$.get(t);
      var i = a.$flags$;
      var l = a.$lazyInstance$;
      r = parsePropertyValue(r, n.$members$[t][0]);
      var c = Number.isNaN(s) && Number.isNaN(r);
      var f = r !== s && !c;
      if ((!(i & 8) || s === void 0) && f) {
        a.$instanceValues$.set(t, r);
        if (l) {
          if (n.$watchers$ && i & 128) {
            var u = n.$watchers$[t];
            if (u) {
              u.map(function(e2) {
                try {
                  l[e2](r, s, t);
                } catch (e3) {
                  consoleError(e3, o);
                }
              });
            }
          }
          if ((i & (2 | 16)) === 2) {
            scheduleUpdate(a, false);
          }
        }
      }
    };
    proxyComponent = function(e, t, r) {
      if (t.$members$) {
        if (e.watchers) {
          t.$watchers$ = e.watchers;
        }
        var n = Object.entries(t.$members$);
        var a = e.prototype;
        n.map(function(e2) {
          var n2 = e2[0], o2 = e2[1][0];
          if (o2 & 31 || r & 2 && o2 & 32) {
            Object.defineProperty(a, n2, { get: function() {
              return getValue(this, n2);
            }, set: function(e3) {
              setValue(this, n2, e3, t);
            }, configurable: true, enumerable: true });
          } else if (r & 1 && o2 & 64) {
            Object.defineProperty(a, n2, { value: function() {
              var e3 = [];
              for (var t2 = 0; t2 < arguments.length; t2++) {
                e3[t2] = arguments[t2];
              }
              var r2 = getHostRef(this);
              return r2.$onInstancePromise$.then(function() {
                var t3;
                return (t3 = r2.$lazyInstance$)[n2].apply(t3, e3);
              });
            } });
          }
        });
        if (r & 1) {
          var o = /* @__PURE__ */ new Map();
          a.attributeChangedCallback = function(e2, t2, r2) {
            var n2 = this;
            plt.jmp(function() {
              var t3 = o.get(e2);
              if (n2.hasOwnProperty(t3)) {
                r2 = n2[t3];
                delete n2[t3];
              } else if (a.hasOwnProperty(t3) && typeof n2[t3] === "number" && n2[t3] == r2) {
                return;
              }
              n2[t3] = r2 === null && typeof n2[t3] === "boolean" ? false : r2;
            });
          };
          e.observedAttributes = n.filter(function(e2) {
            var t2 = e2[0], r2 = e2[1];
            return r2[0] & 15;
          }).map(function(e2) {
            var r2 = e2[0], n2 = e2[1];
            var a2 = n2[1] || r2;
            o.set(a2, r2);
            if (n2[0] & 512) {
              t.$attrsToReflect$.push([r2, a2]);
            }
            return a2;
          });
        }
      }
      return e;
    };
    initializeComponent = function(e, t, r, n, a) {
      return __awaiter(void 0, void 0, void 0, function() {
        var e2, n2, o, s, i, l, c;
        return __generator(this, function(f) {
          switch (f.label) {
            case 0:
              if (!((t.$flags$ & 32) === 0))
                return [3, 3];
              t.$flags$ |= 32;
              a = loadModule(r);
              if (!a.then)
                return [3, 2];
              e2 = uniqueTime();
              return [4, a];
            case 1:
              a = f.sent();
              e2();
              f.label = 2;
            case 2:
              if (!a.isProxied) {
                {
                  r.$watchers$ = a.watchers;
                }
                proxyComponent(a, r, 2);
                a.isProxied = true;
              }
              n2 = createTime("createInstance", r.$tagName$);
              {
                t.$flags$ |= 8;
              }
              try {
                new a(t);
              } catch (e3) {
                consoleError(e3);
              }
              {
                t.$flags$ &= ~8;
              }
              {
                t.$flags$ |= 128;
              }
              n2();
              fireConnectedCallback(t.$lazyInstance$);
              if (a.style) {
                o = a.style;
                s = getScopeId(r);
                if (!styles.has(s)) {
                  i = createTime("registerStyles", r.$tagName$);
                  registerStyle(s, o, !!(r.$flags$ & 1));
                  i();
                }
              }
              f.label = 3;
            case 3:
              l = t.$ancestorComponent$;
              c = function() {
                return scheduleUpdate(t, true);
              };
              if (l && l["s-rc"]) {
                l["s-rc"].push(c);
              } else {
                c();
              }
              return [2];
          }
        });
      });
    };
    fireConnectedCallback = function(e) {
      {
        safeCall(e, "connectedCallback");
      }
    };
    connectedCallback = function(e) {
      if ((plt.$flags$ & 1) === 0) {
        var t = getHostRef(e);
        var r = t.$cmpMeta$;
        var n = createTime("connectedCallback", r.$tagName$);
        if (!(t.$flags$ & 1)) {
          t.$flags$ |= 1;
          {
            if (r.$flags$ & (4 | 8)) {
              setContentReference(e);
            }
          }
          {
            var a = e;
            while (a = a.parentNode || a.host) {
              if (a["s-p"]) {
                attachToAncestor(t, t.$ancestorComponent$ = a);
                break;
              }
            }
          }
          if (r.$members$) {
            Object.entries(r.$members$).map(function(t2) {
              var r2 = t2[0], n2 = t2[1][0];
              if (n2 & 31 && e.hasOwnProperty(r2)) {
                var a2 = e[r2];
                delete e[r2];
                e[r2] = a2;
              }
            });
          }
          {
            nextTick(function() {
              return initializeComponent(e, t, r);
            });
          }
        } else {
          addHostEventListeners(e, t, r.$listeners$);
          fireConnectedCallback(t.$lazyInstance$);
        }
        n();
      }
    };
    setContentReference = function(e) {
      var t = e["s-cr"] = doc.createComment("");
      t["s-cn"] = true;
      e.insertBefore(t, e.firstChild);
    };
    disconnectedCallback = function(e) {
      if ((plt.$flags$ & 1) === 0) {
        var t = getHostRef(e);
        var r = t.$lazyInstance$;
        {
          if (t.$rmListeners$) {
            t.$rmListeners$.map(function(e2) {
              return e2();
            });
            t.$rmListeners$ = void 0;
          }
        }
        if (plt.$cssShim$) {
          plt.$cssShim$.removeHost(e);
        }
        {
          safeCall(r, "disconnectedCallback");
        }
      }
    };
    bootstrapLazy = function(e, t) {
      if (t === void 0) {
        t = {};
      }
      var r = createTime();
      var n = [];
      var a = t.exclude || [];
      var o = win.customElements;
      var s = doc.head;
      var i = s.querySelector("meta[charset]");
      var l = doc.createElement("style");
      var c = [];
      var f;
      var u = true;
      Object.assign(plt, t);
      plt.$resourcesUrl$ = new URL(t.resourcesUrl || "./", doc.baseURI).href;
      e.map(function(e2) {
        e2[1].map(function(t2) {
          var r2 = { $flags$: t2[0], $tagName$: t2[1], $members$: t2[2], $listeners$: t2[3] };
          {
            r2.$members$ = t2[2];
          }
          {
            r2.$listeners$ = t2[3];
          }
          {
            r2.$attrsToReflect$ = [];
          }
          {
            r2.$watchers$ = {};
          }
          var s2 = r2.$tagName$;
          var i2 = function(e3) {
            __extends(t3, e3);
            function t3(t4) {
              var n2 = e3.call(this, t4) || this;
              t4 = n2;
              registerHost(t4, r2);
              return n2;
            }
            t3.prototype.connectedCallback = function() {
              var e4 = this;
              if (f) {
                clearTimeout(f);
                f = null;
              }
              if (u) {
                c.push(this);
              } else {
                plt.jmp(function() {
                  return connectedCallback(e4);
                });
              }
            };
            t3.prototype.disconnectedCallback = function() {
              var e4 = this;
              plt.jmp(function() {
                return disconnectedCallback(e4);
              });
            };
            t3.prototype.componentOnReady = function() {
              return getHostRef(this).$onReadyPromise$;
            };
            return t3;
          }(HTMLElement);
          r2.$lazyBundleId$ = e2[0];
          if (!a.includes(s2) && !o.get(s2)) {
            n.push(s2);
            o.define(s2, proxyComponent(i2, r2, 1));
          }
        });
      });
      {
        l.innerHTML = n + HYDRATED_CSS;
        l.setAttribute("data-styles", "");
        s.insertBefore(l, i ? i.nextSibling : s.firstChild);
      }
      u = false;
      if (c.length) {
        c.map(function(e2) {
          return e2.connectedCallback();
        });
      } else {
        {
          plt.jmp(function() {
            return f = setTimeout(appDidLoad, 30);
          });
        }
      }
      r();
    };
    hostRefs = /* @__PURE__ */ new WeakMap();
    getHostRef = function(e) {
      return hostRefs.get(e);
    };
    registerInstance = function(e, t) {
      return hostRefs.set(t.$lazyInstance$ = e, t);
    };
    registerHost = function(e, t) {
      var r = { $flags$: 0, $hostElement$: e, $cmpMeta$: t, $instanceValues$: /* @__PURE__ */ new Map() };
      {
        r.$onInstancePromise$ = new Promise(function(e2) {
          return r.$onInstanceResolve$ = e2;
        });
      }
      {
        r.$onReadyPromise$ = new Promise(function(e2) {
          return r.$onReadyResolve$ = e2;
        });
        e["s-p"] = [];
        e["s-rc"] = [];
      }
      addHostEventListeners(e, r, t.$listeners$);
      return hostRefs.set(e, r);
    };
    isMemberInElement = function(e, t) {
      return t in e;
    };
    consoleError = function(e, t) {
      return (0, console.error)(e, t);
    };
    cmpModules = /* @__PURE__ */ new Map();
    loadModule = function(e, t, r) {
      var n = e.$tagName$.replace(/-/g, "_");
      var a = e.$lazyBundleId$;
      var o = cmpModules.get(a);
      if (o) {
        return o[n];
      }
      if (!r || !BUILD.hotModuleReplacement) {
        var s = function(e2) {
          cmpModules.set(a, e2);
          return e2[n];
        };
        switch (a) {
          case "revo-grid_11":
            return import("./revo-grid_11.entry-2CD46PB3.js").then(s, consoleError);
          case "revogr-clipboard":
            return import("./revogr-clipboard.entry-BRVJGAWD.js").then(s, consoleError);
          case "revogr-filter-panel":
            return import("./revogr-filter-panel.entry-QI7KRVOD.js").then(s, consoleError);
        }
      }
      return import("./".concat(a, ".entry.js").concat("")).then(function(e2) {
        {
          cmpModules.set(a, e2);
        }
        return e2[n];
      }, consoleError);
    };
    styles = /* @__PURE__ */ new Map();
    queueDomReads = [];
    queueDomWrites = [];
    queueTask = function(e, t) {
      return function(r) {
        e.push(r);
        if (!queuePending) {
          queuePending = true;
          if (t && plt.$flags$ & 4) {
            nextTick(flush);
          } else {
            plt.raf(flush);
          }
        }
      };
    };
    consume = function(e) {
      for (var t = 0; t < e.length; t++) {
        try {
          e[t](performance.now());
        } catch (e2) {
          consoleError(e2);
        }
      }
      e.length = 0;
    };
    flush = function() {
      consume(queueDomReads);
      {
        consume(queueDomWrites);
        if (queuePending = queueDomReads.length > 0) {
          plt.raf(flush);
        }
      }
    };
    nextTick = function(e) {
      return promiseResolve().then(e);
    };
    writeTask = queueTask(queueDomWrites, true);
  }
});

export {
  win,
  CSS,
  plt,
  promiseResolve,
  h,
  Host,
  getElement,
  createEvent,
  getRenderingRef,
  forceUpdate,
  bootstrapLazy,
  registerInstance,
  init_index_6f753b3c
};
/*! Bundled license information:

@revolist/revogrid/dist/esm-es5/index-6f753b3c.js:
  (*!
   * Built by Revolist
   *)
*/
//# sourceMappingURL=chunk-LPYZUDWK.js.map
