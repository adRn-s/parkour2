import {
  createEvent,
  init_index_6f753b3c,
  registerInstance
} from "./chunk-LPYZUDWK.js";
import {
  __esm
} from "./chunk-CF3WPAMV.js";

// node_modules/@revolist/revogrid/dist/esm-es5/revogr-clipboard.entry.js
var __awaiter, __generator, Clipboard;
var init_revogr_clipboard_entry = __esm({
  "node_modules/@revolist/revogrid/dist/esm-es5/revogr-clipboard.entry.js"() {
    init_index_6f753b3c();
    __awaiter = function(t, e, r, n) {
      function a(t2) {
        return t2 instanceof r ? t2 : new r(function(e2) {
          e2(t2);
        });
      }
      return new (r || (r = Promise))(function(r2, o) {
        function i(t2) {
          try {
            c(n.next(t2));
          } catch (t3) {
            o(t3);
          }
        }
        function u(t2) {
          try {
            c(n["throw"](t2));
          } catch (t3) {
            o(t3);
          }
        }
        function c(t2) {
          t2.done ? r2(t2.value) : a(t2.value).then(i, u);
        }
        c((n = n.apply(t, e || [])).next());
      });
    };
    __generator = function(t, e) {
      var r = { label: 0, sent: function() {
        if (o[0] & 1)
          throw o[1];
        return o[1];
      }, trys: [], ops: [] }, n, a, o, i;
      return i = { next: u(0), throw: u(1), return: u(2) }, typeof Symbol === "function" && (i[Symbol.iterator] = function() {
        return this;
      }), i;
      function u(t2) {
        return function(e2) {
          return c([t2, e2]);
        };
      }
      function c(i2) {
        if (n)
          throw new TypeError("Generator is already executing.");
        while (r)
          try {
            if (n = 1, a && (o = i2[0] & 2 ? a["return"] : i2[0] ? a["throw"] || ((o = a["return"]) && o.call(a), 0) : a.next) && !(o = o.call(a, i2[1])).done)
              return o;
            if (a = 0, o)
              i2 = [i2[0] & 2, o.value];
            switch (i2[0]) {
              case 0:
              case 1:
                o = i2;
                break;
              case 4:
                r.label++;
                return { value: i2[1], done: false };
              case 5:
                r.label++;
                a = i2[1];
                i2 = [0];
                continue;
              case 7:
                i2 = r.ops.pop();
                r.trys.pop();
                continue;
              default:
                if (!(o = r.trys, o = o.length > 0 && o[o.length - 1]) && (i2[0] === 6 || i2[0] === 2)) {
                  r = 0;
                  continue;
                }
                if (i2[0] === 3 && (!o || i2[1] > o[0] && i2[1] < o[3])) {
                  r.label = i2[1];
                  break;
                }
                if (i2[0] === 6 && r.label < o[1]) {
                  r.label = o[1];
                  o = i2;
                  break;
                }
                if (o && r.label < o[2]) {
                  r.label = o[2];
                  r.ops.push(i2);
                  break;
                }
                if (o[2])
                  r.ops.pop();
                r.trys.pop();
                continue;
            }
            i2 = e.call(t, r);
          } catch (t2) {
            i2 = [6, t2];
            a = 0;
          } finally {
            n = o = 0;
          }
        if (i2[0] & 5)
          throw i2[1];
        return { value: i2[0] ? i2[1] : void 0, done: true };
      }
    };
    Clipboard = function() {
      function t(t2) {
        registerInstance(this, t2);
        this.copyRegion = createEvent(this, "copyRegion", 3);
        this.pasteRegion = createEvent(this, "pasteRegion", 3);
      }
      t.prototype.onPaste = function(t2) {
        var e = this.getData(t2);
        var r = e.types.indexOf("text/html") > -1;
        var n = r ? e.getData("text/html") : e.getData("text");
        var a = r ? this.htmlParse(n) : this.textParse(n);
        this.pasteRegion.emit(a);
        t2.preventDefault();
      };
      t.prototype.copyStarted = function(t2) {
        this.copyRegion.emit(this.getData(t2));
        t2.preventDefault();
      };
      t.prototype.doCopy = function(t2, e) {
        return __awaiter(this, void 0, void 0, function() {
          return __generator(this, function(r) {
            t2.setData("text/plain", e ? this.parserCopy(e) : "");
            return [2];
          });
        });
      };
      t.prototype.parserCopy = function(t2) {
        return t2.map(function(t3) {
          return t3.join("	");
        }).join("\n");
      };
      t.prototype.textParse = function(t2) {
        var e = [];
        var r = t2.split(/\r\n|\n|\r/);
        for (var n in r) {
          e.push(r[n].split("	"));
        }
        return e;
      };
      t.prototype.htmlParse = function(t2) {
        var e = [];
        var r = document.createRange().createContextualFragment(t2).querySelector("table");
        for (var n = 0, a = Array.from(r.rows); n < a.length; n++) {
          var o = a[n];
          e.push(Array.from(o.cells).map(function(t3) {
            return t3.innerText;
          }));
        }
        return e;
      };
      t.prototype.getData = function(t2) {
        var e;
        return t2.clipboardData || ((e = window) === null || e === void 0 ? void 0 : e.clipboardData);
      };
      return t;
    }();
  }
});
init_revogr_clipboard_entry();
export {
  Clipboard as revogr_clipboard
};
/*! Bundled license information:

@revolist/revogrid/dist/esm-es5/revogr-clipboard.entry.js:
  (*!
   * Built by Revolist
   *)
*/
//# sourceMappingURL=revogr-clipboard.entry-BRVJGAWD.js.map
