import {
  __esm
} from "./chunk-CF3WPAMV.js";

// node_modules/@revolist/revogrid/dist/esm-es5/resize-observer-00c48d78.js
var resizeObservers, hasActiveObservations, hasSkippedObservations, msg, deliverResizeLoopError, ResizeObserverBoxOptions, freeze, ResizeObserverSize, DOMRectReadOnly, isSVG, isHidden, isElement, isReplacedElement, global, cache, scrollRegexp, verticalRegexp, IE, parseDimension, size, zeroBoxes, calculateBoxSizes, calculateBoxSize, ResizeObserverEntry, calculateDepthForNode, broadcastActiveObservations, gatherActiveObservationsAtDepth, process, trigger, callbacks, notify, queueMicroTask, queueResizeObserver, watching, isWatching, CATCH_PERIOD, observerConfig, events, time, scheduled, Scheduler, scheduler, updateCount, skipNotifyOnElement, ResizeObservation, ResizeObserverDetail, observerMap, getObservationIndex, ResizeObserverController, ResizeObserver;
var init_resize_observer_00c48d78 = __esm({
  "node_modules/@revolist/revogrid/dist/esm-es5/resize-observer-00c48d78.js"() {
    resizeObservers = [];
    hasActiveObservations = function() {
      return resizeObservers.some(function(e) {
        return e.activeTargets.length > 0;
      });
    };
    hasSkippedObservations = function() {
      return resizeObservers.some(function(e) {
        return e.skippedTargets.length > 0;
      });
    };
    msg = "ResizeObserver loop completed with undelivered notifications.";
    deliverResizeLoopError = function() {
      var e;
      if (typeof ErrorEvent === "function") {
        e = new ErrorEvent("error", { message: msg });
      } else {
        e = document.createEvent("Event");
        e.initEvent("error", false, false);
        e.message = msg;
      }
      window.dispatchEvent(e);
    };
    (function(e) {
      e["BORDER_BOX"] = "border-box";
      e["CONTENT_BOX"] = "content-box";
      e["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
    })(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));
    freeze = function(e) {
      return Object.freeze(e);
    };
    ResizeObserverSize = function() {
      function e(e2, t) {
        this.inlineSize = e2;
        this.blockSize = t;
        freeze(this);
      }
      return e;
    }();
    DOMRectReadOnly = function() {
      function e(e2, t, r, i) {
        this.x = e2;
        this.y = t;
        this.width = r;
        this.height = i;
        this.top = this.y;
        this.left = this.x;
        this.bottom = this.top + this.height;
        this.right = this.left + this.width;
        return freeze(this);
      }
      e.prototype.toJSON = function() {
        var e2 = this, t = e2.x, r = e2.y, i = e2.top, n = e2.right, o = e2.bottom, s = e2.left, a = e2.width, c = e2.height;
        return { x: t, y: r, top: i, right: n, bottom: o, left: s, width: a, height: c };
      };
      e.fromRect = function(t) {
        return new e(t.x, t.y, t.width, t.height);
      };
      return e;
    }();
    isSVG = function(e) {
      return e instanceof SVGElement && "getBBox" in e;
    };
    isHidden = function(e) {
      if (isSVG(e)) {
        var t = e.getBBox(), r = t.width, i = t.height;
        return !r && !i;
      }
      var n = e, o = n.offsetWidth, s = n.offsetHeight;
      return !(o || s || e.getClientRects().length);
    };
    isElement = function(e) {
      var t, r;
      if (e instanceof Element) {
        return true;
      }
      var i = (r = (t = e) === null || t === void 0 ? void 0 : t.ownerDocument) === null || r === void 0 ? void 0 : r.defaultView;
      return !!(i && e instanceof i.Element);
    };
    isReplacedElement = function(e) {
      switch (e.tagName) {
        case "INPUT":
          if (e.type !== "image") {
            break;
          }
        case "VIDEO":
        case "AUDIO":
        case "EMBED":
        case "OBJECT":
        case "CANVAS":
        case "IFRAME":
        case "IMG":
          return true;
      }
      return false;
    };
    global = typeof window !== "undefined" ? window : {};
    cache = /* @__PURE__ */ new WeakMap();
    scrollRegexp = /auto|scroll/;
    verticalRegexp = /^tb|vertical/;
    IE = /msie|trident/i.test(global.navigator && global.navigator.userAgent);
    parseDimension = function(e) {
      return parseFloat(e || "0");
    };
    size = function(e, t, r) {
      if (e === void 0) {
        e = 0;
      }
      if (t === void 0) {
        t = 0;
      }
      if (r === void 0) {
        r = false;
      }
      return new ResizeObserverSize((r ? t : e) || 0, (r ? e : t) || 0);
    };
    zeroBoxes = freeze({ devicePixelContentBoxSize: size(), borderBoxSize: size(), contentBoxSize: size(), contentRect: new DOMRectReadOnly(0, 0, 0, 0) });
    calculateBoxSizes = function(e, t) {
      if (t === void 0) {
        t = false;
      }
      if (cache.has(e) && !t) {
        return cache.get(e);
      }
      if (isHidden(e)) {
        cache.set(e, zeroBoxes);
        return zeroBoxes;
      }
      var r = getComputedStyle(e);
      var i = isSVG(e) && e.ownerSVGElement && e.getBBox();
      var n = !IE && r.boxSizing === "border-box";
      var o = verticalRegexp.test(r.writingMode || "");
      var s = !i && scrollRegexp.test(r.overflowY || "");
      var a = !i && scrollRegexp.test(r.overflowX || "");
      var c = i ? 0 : parseDimension(r.paddingTop);
      var v = i ? 0 : parseDimension(r.paddingRight);
      var u = i ? 0 : parseDimension(r.paddingBottom);
      var l = i ? 0 : parseDimension(r.paddingLeft);
      var h = i ? 0 : parseDimension(r.borderTopWidth);
      var f = i ? 0 : parseDimension(r.borderRightWidth);
      var d = i ? 0 : parseDimension(r.borderBottomWidth);
      var p = i ? 0 : parseDimension(r.borderLeftWidth);
      var b = l + v;
      var g = c + u;
      var z = p + f;
      var O = h + d;
      var x = !a ? 0 : e.offsetHeight - O - e.clientHeight;
      var R = !s ? 0 : e.offsetWidth - z - e.clientWidth;
      var m = n ? b + z : 0;
      var E = n ? g + O : 0;
      var w = i ? i.width : parseDimension(r.width) - m - R;
      var S = i ? i.height : parseDimension(r.height) - E - x;
      var y = w + b + R + z;
      var B = S + g + x + O;
      var T = freeze({ devicePixelContentBoxSize: size(Math.round(w * devicePixelRatio), Math.round(S * devicePixelRatio), o), borderBoxSize: size(y, B, o), contentBoxSize: size(w, S, o), contentRect: new DOMRectReadOnly(l, c, w, S) });
      cache.set(e, T);
      return T;
    };
    calculateBoxSize = function(e, t, r) {
      var i = calculateBoxSizes(e, r), n = i.borderBoxSize, o = i.contentBoxSize, s = i.devicePixelContentBoxSize;
      switch (t) {
        case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
          return s;
        case ResizeObserverBoxOptions.BORDER_BOX:
          return n;
        default:
          return o;
      }
    };
    ResizeObserverEntry = function() {
      function e(e2) {
        var t = calculateBoxSizes(e2);
        this.target = e2;
        this.contentRect = t.contentRect;
        this.borderBoxSize = freeze([t.borderBoxSize]);
        this.contentBoxSize = freeze([t.contentBoxSize]);
        this.devicePixelContentBoxSize = freeze([t.devicePixelContentBoxSize]);
      }
      return e;
    }();
    calculateDepthForNode = function(e) {
      if (isHidden(e)) {
        return Infinity;
      }
      var t = 0;
      var r = e.parentNode;
      while (r) {
        t += 1;
        r = r.parentNode;
      }
      return t;
    };
    broadcastActiveObservations = function() {
      var e = Infinity;
      var t = [];
      resizeObservers.forEach(function r2(i2) {
        if (i2.activeTargets.length === 0) {
          return;
        }
        var n2 = [];
        i2.activeTargets.forEach(function t2(r3) {
          var i3 = new ResizeObserverEntry(r3.target);
          var o = calculateDepthForNode(r3.target);
          n2.push(i3);
          r3.lastReportedSize = calculateBoxSize(r3.target, r3.observedBox);
          if (o < e) {
            e = o;
          }
        });
        t.push(function e2() {
          i2.callback.call(i2.observer, n2, i2.observer);
        });
        i2.activeTargets.splice(0, i2.activeTargets.length);
      });
      for (var r = 0, i = t; r < i.length; r++) {
        var n = i[r];
        n();
      }
      return e;
    };
    gatherActiveObservationsAtDepth = function(e) {
      resizeObservers.forEach(function t(r) {
        r.activeTargets.splice(0, r.activeTargets.length);
        r.skippedTargets.splice(0, r.skippedTargets.length);
        r.observationTargets.forEach(function t2(i) {
          if (i.isActive()) {
            if (calculateDepthForNode(i.target) > e) {
              r.activeTargets.push(i);
            } else {
              r.skippedTargets.push(i);
            }
          }
        });
      });
    };
    process = function() {
      var e = 0;
      gatherActiveObservationsAtDepth(e);
      while (hasActiveObservations()) {
        e = broadcastActiveObservations();
        gatherActiveObservationsAtDepth(e);
      }
      if (hasSkippedObservations()) {
        deliverResizeLoopError();
      }
      return e > 0;
    };
    callbacks = [];
    notify = function() {
      return callbacks.splice(0).forEach(function(e) {
        return e();
      });
    };
    queueMicroTask = function(e) {
      if (!trigger) {
        var t = 0;
        var r = document.createTextNode("");
        var i = { characterData: true };
        new MutationObserver(function() {
          return notify();
        }).observe(r, i);
        trigger = function() {
          r.textContent = "" + (t ? t-- : t++);
        };
      }
      callbacks.push(e);
      trigger();
    };
    queueResizeObserver = function(e) {
      queueMicroTask(function t() {
        requestAnimationFrame(e);
      });
    };
    watching = 0;
    isWatching = function() {
      return !!watching;
    };
    CATCH_PERIOD = 250;
    observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
    events = ["resize", "load", "transitionend", "animationend", "animationstart", "animationiteration", "keyup", "keydown", "mouseup", "mousedown", "mouseover", "mouseout", "blur", "focus"];
    time = function(e) {
      if (e === void 0) {
        e = 0;
      }
      return Date.now() + e;
    };
    scheduled = false;
    Scheduler = function() {
      function e() {
        var e2 = this;
        this.stopped = true;
        this.listener = function() {
          return e2.schedule();
        };
      }
      e.prototype.run = function(e2) {
        var t = this;
        if (e2 === void 0) {
          e2 = CATCH_PERIOD;
        }
        if (scheduled) {
          return;
        }
        scheduled = true;
        var r = time(e2);
        queueResizeObserver(function() {
          var i = false;
          try {
            i = process();
          } finally {
            scheduled = false;
            e2 = r - time();
            if (!isWatching()) {
              return;
            }
            if (i) {
              t.run(1e3);
            } else if (e2 > 0) {
              t.run(e2);
            } else {
              t.start();
            }
          }
        });
      };
      e.prototype.schedule = function() {
        this.stop();
        this.run();
      };
      e.prototype.observe = function() {
        var e2 = this;
        var t = function() {
          return e2.observer && e2.observer.observe(document.body, observerConfig);
        };
        document.body ? t() : global.addEventListener("DOMContentLoaded", t);
      };
      e.prototype.start = function() {
        var e2 = this;
        if (this.stopped) {
          this.stopped = false;
          this.observer = new MutationObserver(this.listener);
          this.observe();
          events.forEach(function(t) {
            return global.addEventListener(t, e2.listener, true);
          });
        }
      };
      e.prototype.stop = function() {
        var e2 = this;
        if (!this.stopped) {
          this.observer && this.observer.disconnect();
          events.forEach(function(t) {
            return global.removeEventListener(t, e2.listener, true);
          });
          this.stopped = true;
        }
      };
      return e;
    }();
    scheduler = new Scheduler();
    updateCount = function(e) {
      !watching && e > 0 && scheduler.start();
      watching += e;
      !watching && scheduler.stop();
    };
    skipNotifyOnElement = function(e) {
      return !isSVG(e) && !isReplacedElement(e) && getComputedStyle(e).display === "inline";
    };
    ResizeObservation = function() {
      function e(e2, t) {
        this.target = e2;
        this.observedBox = t || ResizeObserverBoxOptions.CONTENT_BOX;
        this.lastReportedSize = { inlineSize: 0, blockSize: 0 };
      }
      e.prototype.isActive = function() {
        var e2 = calculateBoxSize(this.target, this.observedBox, true);
        if (skipNotifyOnElement(this.target)) {
          this.lastReportedSize = e2;
        }
        if (this.lastReportedSize.inlineSize !== e2.inlineSize || this.lastReportedSize.blockSize !== e2.blockSize) {
          return true;
        }
        return false;
      };
      return e;
    }();
    ResizeObserverDetail = function() {
      function e(e2, t) {
        this.activeTargets = [];
        this.skippedTargets = [];
        this.observationTargets = [];
        this.observer = e2;
        this.callback = t;
      }
      return e;
    }();
    observerMap = /* @__PURE__ */ new WeakMap();
    getObservationIndex = function(e, t) {
      for (var r = 0; r < e.length; r += 1) {
        if (e[r].target === t) {
          return r;
        }
      }
      return -1;
    };
    ResizeObserverController = function() {
      function e() {
      }
      e.connect = function(e2, t) {
        var r = new ResizeObserverDetail(e2, t);
        observerMap.set(e2, r);
      };
      e.observe = function(e2, t, r) {
        var i = observerMap.get(e2);
        var n = i.observationTargets.length === 0;
        if (getObservationIndex(i.observationTargets, t) < 0) {
          n && resizeObservers.push(i);
          i.observationTargets.push(new ResizeObservation(t, r && r.box));
          updateCount(1);
          scheduler.schedule();
        }
      };
      e.unobserve = function(e2, t) {
        var r = observerMap.get(e2);
        var i = getObservationIndex(r.observationTargets, t);
        var n = r.observationTargets.length === 1;
        if (i >= 0) {
          n && resizeObservers.splice(resizeObservers.indexOf(r), 1);
          r.observationTargets.splice(i, 1);
          updateCount(-1);
        }
      };
      e.disconnect = function(e2) {
        var t = this;
        var r = observerMap.get(e2);
        r.observationTargets.slice().forEach(function(r2) {
          return t.unobserve(e2, r2.target);
        });
        r.activeTargets.splice(0, r.activeTargets.length);
      };
      return e;
    }();
    ResizeObserver = function() {
      function e(e2) {
        if (arguments.length === 0) {
          throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (typeof e2 !== "function") {
          throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
        }
        ResizeObserverController.connect(this, e2);
      }
      e.prototype.observe = function(e2, t) {
        if (arguments.length === 0) {
          throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (!isElement(e2)) {
          throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
        }
        ResizeObserverController.observe(this, e2, t);
      };
      e.prototype.unobserve = function(e2) {
        if (arguments.length === 0) {
          throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
        }
        if (!isElement(e2)) {
          throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
        }
        ResizeObserverController.unobserve(this, e2);
      };
      e.prototype.disconnect = function() {
        ResizeObserverController.disconnect(this);
      };
      e.toString = function() {
        return "function ResizeObserver () { [polyfill code] }";
      };
      return e;
    }();
  }
});
init_resize_observer_00c48d78();
export {
  ResizeObserver,
  ResizeObserverEntry,
  ResizeObserverSize
};
/*! Bundled license information:

@revolist/revogrid/dist/esm-es5/resize-observer-00c48d78.js:
  (*!
   * Built by Revolist
   *)
*/
//# sourceMappingURL=resize-observer-00c48d78-Y7DQ6MUL.js.map
